document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    orders = JSON.parse(localStorage.getItem('orders')) || [];
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadOrders();
    loadProductOptions();
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('add-order').addEventListener('click', showAddOrderModal);
    document.getElementById('order-form').addEventListener('submit', saveOrder);
    document.getElementById('status-filter').addEventListener('change', filterOrders);
    document.querySelector('#order-modal .close').addEventListener('click', closeOrderModal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('order-modal');
        if (event.target === modal) {
            closeOrderModal();
        }
    });
});

let orders = [];
let currentOrderId = null;

function loadOrders(filter = 'all') {
    const filteredOrders = filter === 'all' 
        ? orders 
        : orders.filter(order => order.status === filter);
    
    const tbody = document.querySelector('#orders-table tbody');
    const products = JSON.parse(localStorage.getItem('products')) || [];
    
    tbody.innerHTML = filteredOrders.map(order => {
        const product = products.find(p => p.id === order.productId);
        const productName = product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const productWeight = product ? product.weight + ' –≥' : '‚Äî';
        const productPrice = product ? product.price + ' ‚ÇΩ' : '‚Äî';
        
        return `
            <tr data-id="${order.id}">
                <td>${formatDate(order.date)}</td>
                <td>${productName}</td>
                <td>${productWeight}</td>
                <td>${productPrice}</td>
                <td>${order.customer}</td>
                <td><span class="status status-${order.status}">${getStatusText(order.status)}</span></td>
                <td>
                    <button class="btn-edit" onclick="editOrder(${order.id})">‚úèÔ∏è</button>
                    <button class="btn-delete" onclick="deleteOrder(${order.id})">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    }).join('');
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function getStatusText(status) {
    const statusMap = {
        'working': '–í —Ä–∞–±–æ—Ç–µ',
        'ready': '–ì–æ—Ç–æ–≤',
        'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
        'canceled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
    };
    return statusMap[status] || status;
}

function loadProductOptions() {
    const products = JSON.parse(localStorage.getItem('products')) || [];
    const select = document.getElementById('order-product');
    
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ</option>' + 
        products.map(product => `
            <option value="${product.id}">
                ${product.name} (${product.weight}–≥, ${product.price}‚ÇΩ)
            </option>
        `).join('');
}

function showAddOrderModal() {
    currentOrderId = null;
    document.getElementById('order-form').reset();
    document.getElementById('order-date').value = new Date().toISOString().split('T')[0];
    document.getElementById('order-modal-title').textContent = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑';
    document.getElementById('order-modal').style.display = 'block';
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω
    loadProductOptions();
}

function editOrder(id) {
    const order = orders.find(o => o.id === id);
    if (!order) return;
    
    currentOrderId = id;
    document.getElementById('order-id').value = id;
    document.getElementById('order-product').value = order.productId;
    document.getElementById('order-customer').value = order.customer;
    document.getElementById('order-status').value = order.status;
    document.getElementById('order-date').value = order.date.split('T')[0];
    
    document.getElementById('order-modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑';
    document.getElementById('order-modal').style.display = 'block';
}




function saveOrder(e) {
    e.preventDefault();
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –∏–∑–¥–µ–ª–∏—è
    const productSelect = document.getElementById('order-product');
    if (!productSelect) {
        alert('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –∏–∑–¥–µ–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è
    const productId = parseInt(productSelect.value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è productId
    if (isNaN(productId) || productSelect.selectedIndex === -1) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ');
        return;
    }
    
    const customer = document.getElementById('order-customer').value.trim();
    const status = document.getElementById('order-status').value;
    const date = document.getElementById('order-date').value || new Date().toISOString().split('T')[0];
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    if (!customer) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞');
        return;
    }
    
    const products = JSON.parse(localStorage.getItem('products')) || [];
    const product = products.find(p => p.id === productId);
    
    if (!product) {
        alert('–û—à–∏–±–∫–∞: –∏–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const productName = product.name;
    const productWeight = product.weight;
    const materialId = product.materialId;
    
    const orderData = {
        id: currentOrderId || Date.now(),
        productId,
        productName,
        productWeight,
        materialId,
        customer,
        status,
        date
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const existingOrder = currentOrderId ? orders.find(o => o.id === currentOrderId) : null;
    const wasSold = existingOrder && existingOrder.status === 'sold';
    const nowSold = status === 'sold';
    
    if (currentOrderId) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        const index = orders.findIndex(o => o.id === currentOrderId);
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–ü—Ä–æ–¥–∞–Ω–æ" –∏–ª–∏ —Å "–ü—Ä–æ–¥–∞–Ω–æ"
        if (wasSold !== nowSold) {
            updateMaterialWeight(materialId, productWeight, nowSold ? 'subtract' : 'add');
        }
        
        orders[index] = orderData;
    } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if (nowSold) {
            updateMaterialWeight(materialId, productWeight, 'subtract');
        }
        orders.push(orderData);
    }
    
    saveOrders();
    closeOrderModal();
}






// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
function updateMaterialWeight(materialId, weight, operation) {
    const materials = JSON.parse(localStorage.getItem('materials')) || [];
    const materialIndex = materials.findIndex(m => m.id === materialId);
    
    if (materialIndex === -1) {
        console.error('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    if (operation === 'subtract') {
        materials[materialIndex].remaining -= weight;
        if (materials[materialIndex].remaining < 0) {
            materials[materialIndex].remaining = 0;
            alert('–í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞—Ç–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è!');
        }
    } else if (operation === 'add') {
        materials[materialIndex].remaining += weight;
    }
    
    localStorage.setItem('materials', JSON.stringify(materials));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if (typeof loadMaterials === 'function') {
        loadMaterials();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é deleteOrder() –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–µ—Å–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
function deleteOrder(id) {
    const order = orders.find(o => o.id === id);
    if (!order) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–æ–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if (order.status === 'sold' && order.materialId && order.productWeight) {
            updateMaterialWeight(order.materialId, order.productWeight, 'add');
        }
        
        orders = orders.filter(o => o.id !== id);
        saveOrders();
    }
}

function deleteOrder(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
        orders = orders.filter(o => o.id !== id);
        saveOrders();
    }
}

function filterOrders() {
    const filter = document.getElementById('status-filter').value;
    loadOrders(filter);
}

function saveOrders() {
    localStorage.setItem('orders', JSON.stringify(orders));
    loadOrders(document.getElementById('status-filter').value);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (typeof updateFinanceSummary === 'function') {
        updateFinanceSummary();
    }
}

function closeOrderModal() {
    document.getElementById('order-modal').style.display = 'none';
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.editOrder = editOrder;
window.deleteOrder = deleteOrder;